# according to https://github.com/luc99a/Assembly-Codes/blob/master/fibonacci.asm
code section

start:
	move eax <= 1
	move ebx <= 1
	move ecx <= 20
	asm loop:
	add ebx <= eax
	push eax
	push ebx
	push ecx
	launch printnum
	pop ecx
	pop eax
	pop ebx
	asm dec ecx
	test ecx, ecx
	jumpzeroflag loop
	move eax <= 1
	move ebx <= 0
	interrupt 0x80

printnum:
	asm xor edi, edi
	asm divide:
	asm xor edx, edx
	move ecx <= 10
	asm div ecx
	push ebx
	asm inc edi
	test eax, eax
	jumpzeroflag divide
	asm print:
	pop eax
	add eax <= '0'
	move [toprint] <= eax
	move ebx <= 1
	move ecx <= toprint
	move edx <= 1
	move eax <= 4
	interrupt 0x80
	asm dec edi
	test edi, edi
	jumpzeroflag print
	move eax <= 4
	move ebx <= 1
	move ecx <= lf
	move edx <= 1
	interrupt 0x80
	return



data section
	asm lf db 0Ah
	asm section .bss
	asm toprint: resb 1
